// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: batch.go

package sqlc

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const deleteAccount = `-- name: DeleteAccount :batchexec
DELETE FROM account
WHERE id = $1
`

type DeleteAccountBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

func (q *Queries) DeleteAccount(ctx context.Context, id []int64) *DeleteAccountBatchResults {
	batch := &pgx.Batch{}
	for _, a := range id {
		vals := []interface{}{
			a,
		}
		batch.Queue(deleteAccount, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &DeleteAccountBatchResults{br, len(id), false}
}

func (b *DeleteAccountBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *DeleteAccountBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const updateAccount = `-- name: UpdateAccount :batchexec
UPDATE account
SET balance = $2
WHERE id = $1
RETURNING id, owner, balance, currency, created_at
`

type UpdateAccountBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type UpdateAccountParams struct {
	ID      int64
	Balance int64
}

func (q *Queries) UpdateAccount(ctx context.Context, arg []UpdateAccountParams) *UpdateAccountBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ID,
			a.Balance,
		}
		batch.Queue(updateAccount, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &UpdateAccountBatchResults{br, len(arg), false}
}

func (b *UpdateAccountBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *UpdateAccountBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
